{"ast":null,"code":"// 3D Vector with support operations\n// invariant: vector must have non-negative magnitude (|v| >= 0)\nexport default class Vector3 {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  } // returns the magnitude of this vector\n\n\n  magnitude() {\n    return Math.sqrt(this.squaredMagnitude());\n  } // returns the squared magnitude of this vector\n\n\n  squaredMagnitude() {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  } // normalizes this vector (assumes length is nonnegative)\n\n\n  normalize() {\n    const length = this.magnitude();\n    this.x /= length;\n    this.y /= length;\n    this.z /= length;\n  } // inverts this vector\n\n\n  invert() {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n  } // adds another Vector3 to this vector\n\n\n  addVector(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n  } // add a Vector3 scaled by s to this vector\n\n\n  addScaledVector(s, v) {\n    this.x += s * v.x;\n    this.y += s * v.y;\n    this.z += s * v.z;\n  } // set components of this vector\n\n\n  setComponents(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  } // multiply this vector by a scalar\n\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n    this.z *= s;\n  } // returns a cloned copy of the vector\n\n\n  clone() {\n    return new Vector3(this.x, this.y, this.z);\n  } // below are static methods\n  // returns scalar product of a scalar and a vector\n\n\n  static scalarProduct(s, v) {\n    return new Vector3(s * v.x, s * v.y, s * v.z);\n  } // returns the cross product of two vectors\n\n\n  static crossProduct(v1, v2) {\n    return new Vector3(v1.y * v2.z - v2.y * v1.z, v1.x * v2.z - v2.x * v1.z, v1.x * v2.y - v2.x * v1.x);\n  }\n\n}","map":{"version":3,"names":["Vector3","constructor","x","y","z","magnitude","Math","sqrt","squaredMagnitude","normalize","length","invert","addVector","v","addScaledVector","s","setComponents","multiplyScalar","clone","scalarProduct","crossProduct","v1","v2"],"sources":["/Users/danny/Github/physics_game_engine/frontend/src/math_library/Vector3.ts"],"sourcesContent":["// 3D Vector with support operations\n// invariant: vector must have non-negative magnitude (|v| >= 0)\nexport default class Vector3 {\n    constructor(public x: number, public y: number, public z: number) {}\n\n    // returns the magnitude of this vector\n    magnitude(): number {\n        return Math.sqrt(this.squaredMagnitude());\n    }\n\n    // returns the squared magnitude of this vector\n    squaredMagnitude(): number {\n        return this.x*this.x + this.y*this.y + this.z*this.z;\n    }\n\n    // normalizes this vector (assumes length is nonnegative)\n    normalize(): void {\n        const length = this.magnitude();\n        this.x /= length;\n        this.y /= length;\n        this.z /= length;\n    }\n\n    // inverts this vector\n    invert(): void {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n    }\n\n    // adds another Vector3 to this vector\n    addVector(v: Vector3): void {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n\n    // add a Vector3 scaled by s to this vector\n    addScaledVector(s: number, v: Vector3): void {\n        this.x += s * v.x;\n        this.y += s * v.y;\n        this.z += s * v.z;\n    }\n\n    // set components of this vector\n    setComponents(x: number, y: number, z: number): void {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    // multiply this vector by a scalar\n    multiplyScalar(s: number): void {\n        this.x *= s;\n        this.y *= s;\n        this.z *= s;\n    }\n\n    // returns a cloned copy of the vector\n    clone(): Vector3 {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    // below are static methods\n\n    // returns scalar product of a scalar and a vector\n    static scalarProduct(s: number, v: Vector3): Vector3 {\n        return new Vector3(s * v.x, s * v.y, s * v.z);\n    }\n\n    // returns the cross product of two vectors\n    static crossProduct(v1: Vector3, v2: Vector3): Vector3 {\n        return new Vector3(\n            v1.y*v2.z - v2.y*v1.z,\n            v1.x*v2.z - v2.x*v1.z,\n            v1.x*v2.y - v2.x*v1.x\n        );\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}