{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_game_engine/frontend/src/GraphicsPlayground/GraphicsPlayground.js\";\nimport React from \"react\";\nimport { WebGLUtils } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.gl = null;\n  }\n\n  componentDidMount() {\n    this.gl = this.canvasRef.current.getContext(\"webgl2\");\n\n    if (!this.gl) {\n      console.log(\"No webgl2 context found.\");\n    }\n\n    this.main();\n  }\n\n  componentWillUnmount() {// TODO: research how to clean up webgl?\n  }\n\n  main() {\n    const gl = this.gl;\n    let vertexShaderSource = `#version 300 es\n\n        // an attribute is an input(in) in a vertex shader.\n        // It will receive data from a buffer\n        in vec4 a_position;\n\n        //all shaders have a main function\n        void main() {\n            // gl_Position is a special variable a vertex shader\n            // is responsible for setting\n            gl_Position = a_position;\n        }\n        `;\n    let fragmentShaderSource = `#version 300 es\n\n        // fragment shaders don't have a default precision so we need\n        // to pick one. highp is a good default. It means \"high precision\"\n        precision highp float;\n\n        // we need to declare an output for the fragment shader\n        out vec4 outColor;\n\n        void main() {\n            // Just set the output to a constant reddish-purple\n            outColor = vec4(1, 0, 0.5, 1);\n        }\n        `;\n    let vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    let fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    let program = this.createProgram(gl, vertexShader, fragmentShader);\n    let positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n    let positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer); // three 2d points\n\n    let positions = [0, 0, 0, 0.5, 0.7, 0];\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n    let vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    let size = 2; // 2 components per iteration\n\n    let type = gl.FLOAT; // the data is 32bit floats\n\n    let normalize = false; // don't normalize the data\n\n    let stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position\n\n    let offset = 0; // start at the beginning of the buffer\n\n    gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset); // tells WebGL the -1 +1 clip space maps to 0 <-> gl.canvas.width for x, 0 <-> gl.canvas.height for y.\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // Clear the canvas\n\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT); // Tell it to use our program (pair of shaders)\n\n    gl.useProgram(program); // Bind the attribute/buffer set we want.\n\n    gl.bindVertexArray(vao); // execute GLSL program.\n\n    let primitiveType = gl.TRIANGLES;\n    offset = 0;\n    let count = 3;\n    gl.drawArrays(primitiveType, offset, count);\n    this.setGeometry(this.gl);\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n    vertexShaderSource = `#version 300 es\n\n        in vec2 a_position;\n        out vec4 v_color;\n\n        uniform vec2 u_resolution;\n\n        //all shaders have a main function\n        void main() {\n            // convert the position from pixels to 0.0 to 1.0\n            vec2 zeroToOne = a_position / u_resolution;\n\n            // convert from 0->1 to 0->2\n            vec2 zeroToTwo = zeroToOne * 2.0;\n\n            // convert from 0_>2 to -1->+1 (clip space)\n            vec2 clipSpace = zeroToTwo - 1.0;\n\n            // Multiply the position by the matrix.\n            gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\n\n            // Convert from clip space to color space.\n            // Clip space goes -1.0 to +1.0\n            // Color spaces goes from 0.0 to 1.0\n            v_color = gl_Position * 0.5 + 0.5;\n        }\n        `;\n    fragmentShaderSource = `version 300 es\n        \n        precision highp float;\n\n        in vec4 v_color;\n\n        out vec4 outColor;\n\n        void main() {\n            outColor = v_color;\n        }\n        `; // second part: triangle with gradient\n\n    vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    let positionLocation = gl.getAttribLocation(program, \"a_position\");\n    let matrixLocation = gl.getUniformLocation(program, \"u_matrix\"); // program = this.createProgram(gl, vertexShader, fragmentShader);\n  } // Fill the buffer the values that define a triangle.\n\n\n  setGeometry(gl) {\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, -100, 150, 125, -175, 100]), gl.STATIC_DRAW);\n  } // this function creates a shader, uploads the GLSL source, and compiles the shader\n\n\n  createShader(gl, type, source) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (success) {\n      return shader;\n    }\n\n    console.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n  } // links the 2 shaders into a program\n\n\n  createProgram(gl, vertexShader, fragmentShader) {\n    let program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (success) {\n      return program;\n    }\n\n    console.log(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphics_playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"graphics playground page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","WebGLUtils","CANVAS_WIDTH","CANVAS_HEIGHT","Home","Component","constructor","props","canvasRef","createRef","gl","componentDidMount","current","getContext","console","log","main","componentWillUnmount","vertexShaderSource","fragmentShaderSource","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","positionAttributeLocation","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","positions","bufferData","Float32Array","STATIC_DRAW","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","size","type","FLOAT","normalize","stride","offset","vertexAttribPointer","viewport","canvas","width","height","clearColor","clear","COLOR_BUFFER_BIT","useProgram","primitiveType","TRIANGLES","count","drawArrays","setGeometry","positionLocation","matrixLocation","getUniformLocation","source","shader","shaderSource","compileShader","success","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","render"],"sources":["/Users/danny/Github/physics_game_engine/frontend/src/GraphicsPlayground/GraphicsPlayground.js"],"sourcesContent":["import React from \"react\";\nimport { WebGLUtils } from \"three\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.gl = null;\n    }\n\n    componentDidMount() {\n        this.gl = this.canvasRef.current.getContext(\"webgl2\");\n        if(!this.gl) {\n            console.log(\"No webgl2 context found.\");\n        }\n        this.main();\n    }\n\n    componentWillUnmount() {\n        // TODO: research how to clean up webgl?\n    }\n\n    main() {\n        const gl = this.gl;\n\n        let vertexShaderSource = \n        `#version 300 es\n\n        // an attribute is an input(in) in a vertex shader.\n        // It will receive data from a buffer\n        in vec4 a_position;\n\n        //all shaders have a main function\n        void main() {\n            // gl_Position is a special variable a vertex shader\n            // is responsible for setting\n            gl_Position = a_position;\n        }\n        `\n\n        let fragmentShaderSource =\n        `#version 300 es\n\n        // fragment shaders don't have a default precision so we need\n        // to pick one. highp is a good default. It means \"high precision\"\n        precision highp float;\n\n        // we need to declare an output for the fragment shader\n        out vec4 outColor;\n\n        void main() {\n            // Just set the output to a constant reddish-purple\n            outColor = vec4(1, 0, 0.5, 1);\n        }\n        `\n\n        let vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        let fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n        let program = this.createProgram(gl, vertexShader, fragmentShader);\n\n        let positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n        \n        let positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n        // three 2d points\n        let positions = [\n            0, 0,\n            0, 0.5,\n            0.7, 0,\n        ]\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n\n        let vao = gl.createVertexArray();\n        gl.bindVertexArray(vao);\n        gl.enableVertexAttribArray(positionAttributeLocation);\n        let size = 2;   // 2 components per iteration\n        let type = gl.FLOAT;    // the data is 32bit floats\n        let normalize = false;  // don't normalize the data\n        let stride = 0;         // 0 = move forward size * sizeof(type) each iteration to get the next position\n        let offset = 0;         // start at the beginning of the buffer\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\n\n        // tells WebGL the -1 +1 clip space maps to 0 <-> gl.canvas.width for x, 0 <-> gl.canvas.height for y.\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n        // Clear the canvas\n        gl.clearColor(0, 0, 0, 1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        // Tell it to use our program (pair of shaders)\n        gl.useProgram(program);\n\n        // Bind the attribute/buffer set we want.\n        gl.bindVertexArray(vao);\n\n        // execute GLSL program.\n        let primitiveType = gl.TRIANGLES;\n        offset = 0;\n        let count = 3;\n        gl.drawArrays(primitiveType, offset, count);\n\n        this.setGeometry(this.gl);\n        gl.drawArrays(gl.TRIANGLES, 0, 3);\n\n        vertexShaderSource = \n        `#version 300 es\n\n        in vec2 a_position;\n        out vec4 v_color;\n\n        uniform vec2 u_resolution;\n\n        //all shaders have a main function\n        void main() {\n            // convert the position from pixels to 0.0 to 1.0\n            vec2 zeroToOne = a_position / u_resolution;\n\n            // convert from 0->1 to 0->2\n            vec2 zeroToTwo = zeroToOne * 2.0;\n\n            // convert from 0_>2 to -1->+1 (clip space)\n            vec2 clipSpace = zeroToTwo - 1.0;\n\n            // Multiply the position by the matrix.\n            gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\n\n            // Convert from clip space to color space.\n            // Clip space goes -1.0 to +1.0\n            // Color spaces goes from 0.0 to 1.0\n            v_color = gl_Position * 0.5 + 0.5;\n        }\n        `;\n\n        fragmentShaderSource = \n        `version 300 es\n        \n        precision highp float;\n\n        in vec4 v_color;\n\n        out vec4 outColor;\n\n        void main() {\n            outColor = v_color;\n        }\n        `;\n\n        // second part: triangle with gradient\n        vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n        let positionLocation = gl.getAttribLocation(program, \"a_position\");\n        let matrixLocation = gl.getUniformLocation(program, \"u_matrix\");\n\n        // program = this.createProgram(gl, vertexShader, fragmentShader);\n    }\n\n    // Fill the buffer the values that define a triangle.\n    setGeometry(gl) {\n        gl.bufferData(\n            gl.ARRAY_BUFFER,\n            new Float32Array([\n                0, -100,\n                150, 125,\n                -175, 100]),\n            gl.STATIC_DRAW);\n    }\n\n    // this function creates a shader, uploads the GLSL source, and compiles the shader\n    createShader(gl, type, source) {\n        let shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (success) {\n            return shader;\n        }\n\n        console.log(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n    }\n\n    // links the 2 shaders into a program\n    createProgram(gl, vertexShader, fragmentShader) {\n        let program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (success) {\n            return program;\n        }\n\n        console.log(gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n    }\n\n    render() {\n        return (\n            <div className=\"graphics_playground\">\n                <h2>graphics playground page desu...</h2>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        );\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}