{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_game_engine/frontend/src/GraphicsPlayground/GraphicsPlayground.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.gl = null;\n  }\n\n  componentDidMount() {\n    this.gl = this.canvasRef.current.getContext(\"webgl2\");\n\n    if (!this.gl) {\n      console.log(\"No webgl2 context found.\");\n    }\n\n    this.main();\n  }\n\n  componentWillUnmount() {// TODO: research how to clean up webgl?\n  }\n\n  main() {\n    const gl = this.gl;\n    const vertexShaderSource = `#version 300 es\n\n        // an attribute is an input(in) in a vertex shader.\n        // It will receive data from a buffer\n        in vec4 a_position;\n\n        //all shaders have a main function\n        void main() {\n            // gl_Position is a special variable a vertex shader\n            // is responsible for setting\n            gl_Position = a_position;\n        }\n        `;\n    const fragmentShaderSource = `#version 300 es\n\n        // fragment shaders don't have a default precision so we need\n        // to pick one. highp is a good default. It means \"high precision\"\n        precision highp float;\n\n        // we need to declare an output for the fragment shader\n        out vec4 outColor;\n\n        void main() {\n            // Just set the output to a constant reddish-purple\n            outColor = vec4(1, 0, 0.5, 1);\n        }\n        `;\n    let vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    let fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n  } // this function creates a shader, uploads the GLSL source, and compiles the shader\n\n\n  createShader(gl, type, source) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (success) {\n      return shader;\n    }\n\n    console.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphics_playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"graphics playground page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","CANVAS_WIDTH","CANVAS_HEIGHT","Home","Component","constructor","props","canvasRef","createRef","gl","componentDidMount","current","getContext","console","log","main","componentWillUnmount","vertexShaderSource","fragmentShaderSource","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","type","source","shader","shaderSource","compileShader","success","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","render"],"sources":["/Users/danny/Github/physics_game_engine/frontend/src/GraphicsPlayground/GraphicsPlayground.js"],"sourcesContent":["import React from \"react\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.gl = null;\n    }\n\n    componentDidMount() {\n        this.gl = this.canvasRef.current.getContext(\"webgl2\");\n        if(!this.gl) {\n            console.log(\"No webgl2 context found.\");\n        }\n        this.main();\n    }\n\n    componentWillUnmount() {\n        // TODO: research how to clean up webgl?\n    }\n\n    main() {\n        const gl = this.gl;\n\n        const vertexShaderSource = \n        `#version 300 es\n\n        // an attribute is an input(in) in a vertex shader.\n        // It will receive data from a buffer\n        in vec4 a_position;\n\n        //all shaders have a main function\n        void main() {\n            // gl_Position is a special variable a vertex shader\n            // is responsible for setting\n            gl_Position = a_position;\n        }\n        `\n\n        const fragmentShaderSource =\n        `#version 300 es\n\n        // fragment shaders don't have a default precision so we need\n        // to pick one. highp is a good default. It means \"high precision\"\n        precision highp float;\n\n        // we need to declare an output for the fragment shader\n        out vec4 outColor;\n\n        void main() {\n            // Just set the output to a constant reddish-purple\n            outColor = vec4(1, 0, 0.5, 1);\n        }\n        `\n\n        let vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        let fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    }\n\n    // this function creates a shader, uploads the GLSL source, and compiles the shader\n    createShader(gl, type, source) {\n        let shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (success) {\n            return shader;\n        }\n\n        console.log(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n    }\n\n    render() {\n        return (\n            <div className=\"graphics_playground\">\n                <h2>graphics playground page desu...</h2>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        );\n    }\n}"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG,IAArB;AACA,MAAMC,aAAa,GAAG,GAAtB;AAEA,eAAe,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;EAC9CC,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;IACA,KAAKC,SAAL,gBAAiBP,KAAK,CAACQ,SAAN,EAAjB;IACA,KAAKC,EAAL,GAAU,IAAV;EACH;;EAEDC,iBAAiB,GAAG;IAChB,KAAKD,EAAL,GAAU,KAAKF,SAAL,CAAeI,OAAf,CAAuBC,UAAvB,CAAkC,QAAlC,CAAV;;IACA,IAAG,CAAC,KAAKH,EAAT,EAAa;MACTI,OAAO,CAACC,GAAR,CAAY,0BAAZ;IACH;;IACD,KAAKC,IAAL;EACH;;EAEDC,oBAAoB,GAAG,CACnB;EACH;;EAEDD,IAAI,GAAG;IACH,MAAMN,EAAE,GAAG,KAAKA,EAAhB;IAEA,MAAMQ,kBAAkB,GACvB;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAbQ;IAeA,MAAMC,oBAAoB,GACzB;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAdQ;IAgBA,IAAIC,YAAY,GAAG,KAAKC,YAAL,CAAkBX,EAAlB,EAAsBA,EAAE,CAACY,aAAzB,EAAwCJ,kBAAxC,CAAnB;IACA,IAAIK,cAAc,GAAG,KAAKF,YAAL,CAAkBX,EAAlB,EAAsBA,EAAE,CAACc,eAAzB,EAA0CL,oBAA1C,CAArB;EACH,CAvD6C,CAyD9C;;;EACAE,YAAY,CAACX,EAAD,EAAKe,IAAL,EAAWC,MAAX,EAAmB;IAC3B,IAAIC,MAAM,GAAGjB,EAAE,CAACW,YAAH,CAAgBI,IAAhB,CAAb;IACAf,EAAE,CAACkB,YAAH,CAAgBD,MAAhB,EAAwBD,MAAxB;IACAhB,EAAE,CAACmB,aAAH,CAAiBF,MAAjB;IACA,IAAIG,OAAO,GAAGpB,EAAE,CAACqB,kBAAH,CAAsBJ,MAAtB,EAA8BjB,EAAE,CAACsB,cAAjC,CAAd;;IACA,IAAIF,OAAJ,EAAa;MACT,OAAOH,MAAP;IACH;;IAEDb,OAAO,CAACC,GAAR,CAAYL,EAAE,CAACuB,gBAAH,CAAoBN,MAApB,CAAZ;IACAjB,EAAE,CAACwB,YAAH,CAAgBP,MAAhB;EACH;;EAEDQ,MAAM,GAAG;IACL,oBACI;MAAK,SAAS,EAAC,qBAAf;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAK,EAAE,EAAC,kBAAR;QAAA,uBACI;UAAQ,GAAG,EAAE,KAAK3B,SAAlB;UAA6B,KAAK,EAAEN,YAApC;UAAkD,MAAM,EAAEC;QAA1D;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAQH;;AAhF6C"},"metadata":{},"sourceType":"module"}