{"ast":null,"code":"const VERTEX_SHADER_SOURCE = `#version 300 es\n\nvoid main() {\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n    gl_PointSize = 10.0;\n}\n`;\nconst FRAGMENT_SHADER_SOURCE = `#version 300 es\n\nout vec4 fragColor;\nvoid main() {\n    fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n`;\nexport class GraphicsEngine {\n  constructor(gl) {\n    this.gl = gl;\n  }\n\n  print() {\n    console.log(\"graphics engine print\", this.gl);\n  }\n\n  draw() {\n    const gl = this.gl;\n    gl.clearColor(0.0, 0.0, 1.0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    let vertexShader = compileShader(gl, VERTEX_SHADER_SOURCE, gl.VERTEX_SHADER);\n    let fragmentShader = compileShader(gl, FRAGMENT_SHADER_SOURCE, gl.FRAGMENT_SHADER);\n  }\n\n}\n/**\n * Creates and compiles a shader.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL context.\n * @param {string} shaderSource The GLSL source code for the shader.\n * @param {number} shaderType The type of shader, VERTEX_SHADER or FRAGMENT_SHADER.\n * @return {!WebGLShader} The shader.\n */\n\nfunction compileShader(gl, shaderSource, shaderType) {\n  // Create the shader object\n  let shader = gl.createShader(shaderType); // Set the shader source code.\n\n  gl.shaderSource(shader, shaderSource); // Compile the shader\n\n  gl.compileShader(shader); // Check if it compiled\n\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  if (!success) {\n    // Something went wrong during compilation; get the error\n    throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n  }\n\n  return shader;\n}\n/** \n * Creates a program from 2 shaders.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL context.\n * @param {!WebGLShader} vertexShader A vertex shader.\n * @param {!WebGLShader} fragmentShader A fragment shader.\n * @return {!WebGLProgram} A program.\n */\n\n\nfunction createProgram(gl, vertexShader, fragmentShader) {\n  // create a program.\n  let program = gl.createProgram(); // attach the shaders.\n\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader); // link the program.\n\n  gl.linkProgram(program); // Check if it linked.\n\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n  if (!success) {\n    // something went wrong with the link\n    throw \"program failed to link\" + gl.getProgramInfoLog(program);\n  }\n\n  return program;\n}","map":{"version":3,"names":["VERTEX_SHADER_SOURCE","FRAGMENT_SHADER_SOURCE","GraphicsEngine","constructor","gl","print","console","log","draw","clearColor","clear","COLOR_BUFFER_BIT","vertexShader","compileShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderSource","shaderType","shader","createShader","success","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createProgram","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog"],"sources":["/Users/danny/Github/physics_game_engine/frontend/src/graphics_engine/GraphicsEngine.ts"],"sourcesContent":["const VERTEX_SHADER_SOURCE =\n`#version 300 es\n\nvoid main() {\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n    gl_PointSize = 10.0;\n}\n`\n\nconst FRAGMENT_SHADER_SOURCE =\n`#version 300 es\n\nout vec4 fragColor;\nvoid main() {\n    fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n`;\n\nexport class GraphicsEngine {\n    constructor(private gl: WebGL2RenderingContext) {}\n\n    print() {\n        console.log(\"graphics engine print\", this.gl);\n    }\n\n    draw() {\n        const gl = this.gl\n\n        gl.clearColor(0.0, 0.0, 1.0, 1.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        let vertexShader = compileShader(gl, VERTEX_SHADER_SOURCE, gl.VERTEX_SHADER);\n        let fragmentShader = compileShader(gl, FRAGMENT_SHADER_SOURCE, gl.FRAGMENT_SHADER);\n\n    }\n\n    \n\n    \n}\n\n/**\n * Creates and compiles a shader.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL context.\n * @param {string} shaderSource The GLSL source code for the shader.\n * @param {number} shaderType The type of shader, VERTEX_SHADER or FRAGMENT_SHADER.\n * @return {!WebGLShader} The shader.\n */\nfunction compileShader(gl: WebGL2RenderingContext, shaderSource: string, shaderType: number): WebGLShader {\n    // Create the shader object\n    let shader = gl.createShader(shaderType);\n\n    // Set the shader source code.\n    gl.shaderSource(shader, shaderSource);\n\n    // Compile the shader\n    gl.compileShader(shader);\n\n    // Check if it compiled\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!success) {\n        // Something went wrong during compilation; get the error\n        throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n    }\n\n    return shader;\n}\n\n/** \n * Creates a program from 2 shaders.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL context.\n * @param {!WebGLShader} vertexShader A vertex shader.\n * @param {!WebGLShader} fragmentShader A fragment shader.\n * @return {!WebGLProgram} A program.\n */\nfunction createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\n    // create a program.\n    let program = gl.createProgram();\n\n    // attach the shaders.\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n\n    // link the program.\n    gl.linkProgram(program);\n\n    // Check if it linked.\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!success) {\n        // something went wrong with the link\n        throw(\"program failed to link\" + gl.getProgramInfoLog(program));\n    }\n\n    return program;\n}"],"mappings":"AAAA,MAAMA,oBAAoB,GACzB;AACD;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMC,sBAAsB,GAC3B;AACD;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,OAAO,MAAMC,cAAN,CAAqB;EACxBC,WAAW,CAASC,EAAT,EAAqC;IAAA,KAA5BA,EAA4B,GAA5BA,EAA4B;EAAE;;EAElDC,KAAK,GAAG;IACJC,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqC,KAAKH,EAA1C;EACH;;EAEDI,IAAI,GAAG;IACH,MAAMJ,EAAE,GAAG,KAAKA,EAAhB;IAEAA,EAAE,CAACK,UAAH,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B;IACAL,EAAE,CAACM,KAAH,CAASN,EAAE,CAACO,gBAAZ;IAEA,IAAIC,YAAY,GAAGC,aAAa,CAACT,EAAD,EAAKJ,oBAAL,EAA2BI,EAAE,CAACU,aAA9B,CAAhC;IACA,IAAIC,cAAc,GAAGF,aAAa,CAACT,EAAD,EAAKH,sBAAL,EAA6BG,EAAE,CAACY,eAAhC,CAAlC;EAEH;;AAhBuB;AAuB5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASH,aAAT,CAAuBT,EAAvB,EAAmDa,YAAnD,EAAyEC,UAAzE,EAA0G;EACtG;EACA,IAAIC,MAAM,GAAGf,EAAE,CAACgB,YAAH,CAAgBF,UAAhB,CAAb,CAFsG,CAItG;;EACAd,EAAE,CAACa,YAAH,CAAgBE,MAAhB,EAAwBF,YAAxB,EALsG,CAOtG;;EACAb,EAAE,CAACS,aAAH,CAAiBM,MAAjB,EARsG,CAUtG;;EACA,MAAME,OAAO,GAAGjB,EAAE,CAACkB,kBAAH,CAAsBH,MAAtB,EAA8Bf,EAAE,CAACmB,cAAjC,CAAhB;;EACA,IAAI,CAACF,OAAL,EAAc;IACV;IACA,MAAM,8BAA8BjB,EAAE,CAACoB,gBAAH,CAAoBL,MAApB,CAApC;EACH;;EAED,OAAOA,MAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,aAAT,CAAuBrB,EAAvB,EAAmDQ,YAAnD,EAA8EG,cAA9E,EAAyH;EACrH;EACA,IAAIW,OAAO,GAAGtB,EAAE,CAACqB,aAAH,EAAd,CAFqH,CAIrH;;EACArB,EAAE,CAACuB,YAAH,CAAgBD,OAAhB,EAAyBd,YAAzB;EACAR,EAAE,CAACuB,YAAH,CAAgBD,OAAhB,EAAyBX,cAAzB,EANqH,CAQrH;;EACAX,EAAE,CAACwB,WAAH,CAAeF,OAAf,EATqH,CAWrH;;EACA,MAAML,OAAO,GAAGjB,EAAE,CAACyB,mBAAH,CAAuBH,OAAvB,EAAgCtB,EAAE,CAAC0B,WAAnC,CAAhB;;EACA,IAAI,CAACT,OAAL,EAAc;IACV;IACA,MAAM,2BAA2BjB,EAAE,CAAC2B,iBAAH,CAAqBL,OAArB,CAAjC;EACH;;EAED,OAAOA,OAAP;AACH"},"metadata":{},"sourceType":"module"}