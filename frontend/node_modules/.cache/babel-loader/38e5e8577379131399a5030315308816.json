{"ast":null,"code":"var _s = $RefreshSig$();\n\nconst VERTEX_SHADER_SOURCE = `#version 300 es\n\nin vec4 a_position;\n\n// A matrix to transform the position by\nuniform mat4 u_matrix;\n\nvoid main() {\n    // Multiply the position by the matrix.\n    gl_Position = u_matrix * a_position;\n}\n`;\nconst FRAGMENT_SHADER_SOURCE = `#version 300 es\n\nprecision highp float;\nuniform vec4 u_color;\n\nout vec4 outColor;\nvoid main() {\n    outColor = u_color;\n}\n`; // shaders for testing\n\nconst VERTEX_SHADER_2_SOURCE = `#version 300 es\n\n// an attribute is an input(in) to a vertex shader.\n// It will receive data from a buffer.\nin vec4 a_position;\nvoid main() {\n    gl_Position = a_position;\n    gl_PointSize = 10.0;\n}\n`;\nexport class GraphicsEngine {\n  constructor(gl) {\n    this.gl = gl;\n    this.g_points = [];\n    this.program = null;\n  }\n\n  print() {\n    console.log(\"graphics engine print\", this.gl);\n  }\n\n  draw() {\n    const gl = this.gl; // compile shaders, create program and use program\n\n    let program = initProgramFromSources(gl, VERTEX_SHADER_SOURCE, FRAGMENT_SHADER_SOURCE); // look up where the attribute and uniform locations\n\n    let positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n    let colorAttributeLocation = gl.getUniformLocation(program, \"u_color\");\n    let matrixUniformLocation = gl.getUniformLocation(program, \"u_matrix\"); // Create a buffer\n\n    let positionBuffer = gl.createBuffer(); // create a vertex array object (attribute state) and make it the one we're currently working with\n\n    let vao = gl.createVertexArray();\n    gl.bindVertexArray(vao); // Turn on the attribute\n\n    gl.enableVertexAttribArray(positionAttributeLocation); // Bind it to ARRAY_BUFFER (this of it as ARRAY_BUFFER = positionBuffer)\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer); // Fill the current ARRAY_BUFFER buffer\n    // with the values that define a letter 'F'.\n\n    setGeometry(gl); // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n\n    let size = 3; // 3 components per iteration\n\n    let type = gl.FLOAT; // the data is 32bit floats\n\n    let normalize = false; // don't normalize the data\n\n    let stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position.\n\n    let offset = 0; // start at the beginning of the buffer\n\n    gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset); // Create the color buffer, make it the current ARRAY_BUFFER and copy in the color values\n\n    let colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    setColors(gl); // Turn on the attribute\n\n    gl.enableVertexAttribArray(colorAttributeLocation); // Tell the attribute how to get data out of colorBuffer (ARRAY_BUFFER)\n\n    gl.vertexAttribPointer(colorAttributeLocation, 3, gl.UNSIGNED_BYTE, true, 0, 0);\n\n    function degToRad(degrees) {\n      return degrees * Math.PI / 180;\n    } // Draw the scene.\n    // Tell WebGL how to convert from clip space to pixels\n\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // Clear the canvas\n\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT || gl.DEPTH_BUFFER_BIT); // Compute the matrix\n\n    let projectionMatrix = projection(gl.canvas.clientWidth, gl.canvas.clientHeight, 400);\n    let translationMatrix = translation(translations[0], translations[1], translations[2]);\n    let matrix = multiply(projectionMatrix, translationMatrix); // Set the matrix\n\n    gl.uniformMatrix4fv(matrixUniformLocation, false, matrix); // Draw the geometry.\n\n    let primitiveType = gl.TRIANGLES;\n    offset = 0;\n    let count = 16 * 6;\n    gl.drawArrays(primitiveType, offset, count);\n    console.log(\"clientWidth\", gl.canvas.clientWidth);\n    console.log(\"canvas width\", gl.canvas.width);\n    console.log(\"matrix:\", matrix);\n  }\n\n  onClick(e, canvas) {\n    let positionAttributeLocation = this.gl.getAttribLocation(this.program, \"a_position\");\n    console.log(\"positionAttributeLocation\", positionAttributeLocation);\n    this.click(e, this.gl, canvas, positionAttributeLocation);\n  }\n\n  click(e, gl, canvas, a_position) {\n    console.log(\"mouse clicked\");\n    let x = e.clientX; // x coordinate of a mouse pointer\n\n    let y = e.clientY;\n    let rect = e.target.getBoundingClientRect();\n    x = (x - rect.left - canvas.width / 2) / (canvas.width / 2);\n    y = (canvas.height / 2 - (y - rect.top)) / (canvas.height / 2);\n    console.log(\"x\", x, \"y\", y, \"rect\", rect); // Store the coordinates into g_points array\n\n    this.g_points.push(x);\n    this.g_points.push(y);\n    console.log(\"g_points\", this.g_points); // Clear <canvas>\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    for (let i = 0; i < this.g_points.length; i += 2) {\n      // Pass the position of a point to a_Position variable\n      gl.vertexAttrib3f(a_position, this.g_points[i], this.g_points[i + 1], 0.0); // Draw a point\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n    }\n  }\n\n}\n/**\n * Creates and compiles a shader.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL2 context.\n * @param {string} shaderSource The GLSL source code for the shader.\n * @param {number} shaderType The type of shader, VERTEX_SHADER or FRAGMENT_SHADER.\n * @return {!WebGLShader} The shader.\n */\n\nfunction compileShader(gl, shaderSource, shaderType) {\n  // Create the shader object\n  let shader = gl.createShader(shaderType); // Set the shader source code.\n\n  gl.shaderSource(shader, shaderSource); // Compile the shader\n\n  gl.compileShader(shader); // Check if it compiled\n\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  if (!success) {\n    // Something went wrong during compilation; get the error\n    throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n  }\n\n  return shader;\n}\n/** \n * Creates a program from 2 shaders.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL2 context.\n * @param {!WebGLShader} vertexShader A vertex shader.\n * @param {!WebGLShader} fragmentShader A fragment shader.\n * @return {!WebGLProgram} A program.\n */\n\n\nfunction createProgram(gl, vertexShader, fragmentShader) {\n  // create a program.\n  let program = gl.createProgram(); // attach the shaders.\n\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader); // link the program.\n\n  gl.linkProgram(program); // Check if it linked.\n\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n  if (!success) {\n    // something went wrong with the link\n    throw \"program failed to link\" + gl.getProgramInfoLog(program);\n  }\n\n  return program;\n}\n/**\n * Compiles vertex shader and fragment shader from sources. Creates and uses the program. Returns the program.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL2 context.\n * @param {!string} vertexShaderSource The GLSL source code for the vertex shader.\n * @param {!string} fragmentShaderSource The GLSL source code for the fragment shader.\n * @return {!WebGLProgram} The program created.\n */\n\n\nfunction initProgramFromSources(gl, vertexShaderSource, fragmentShaderSource) {\n  _s();\n\n  let vertexShader = compileShader(gl, vertexShaderSource, gl.VERTEX_SHADER);\n  let fragmentShader = compileShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);\n  let program = createProgram(gl, vertexShader, fragmentShader);\n  gl.useProgram(program);\n  return program;\n} // Fill the current ARRAY_BUFFER buffer\n// with the values that define a letter 'F'.\n\n\n_s(initProgramFromSources, \"ZdQBZ3rq7bWAAMQq6hlVCmYF0jM=\", false, function () {\n  return [gl.useProgram];\n});\n\nfunction setGeometry(gl) {\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([// left column front\n  0, 0, 0, 30, 0, 0, 0, 150, 0, 0, 150, 0, 30, 0, 0, 30, 150, 0, // top rung front\n  30, 0, 0, 100, 0, 0, 30, 30, 0, 30, 30, 0, 100, 0, 0, 100, 30, 0, // middle rung front\n  30, 60, 0, 67, 60, 0, 30, 90, 0, 30, 90, 0, 67, 60, 0, 67, 90, 0, // left column back\n  0, 0, 30, 30, 0, 30, 0, 150, 30, 0, 150, 30, 30, 0, 30, 30, 150, 30, // top rung back\n  30, 0, 30, 100, 0, 30, 30, 30, 30, 30, 30, 30, 100, 0, 30, 100, 30, 30, // middle rung back\n  30, 60, 30, 67, 60, 30, 30, 90, 30, 30, 90, 30, 67, 60, 30, 67, 90, 30, // top\n  0, 0, 0, 100, 0, 0, 100, 0, 30, 0, 0, 0, 100, 0, 30, 0, 0, 30, // top rung right\n  100, 0, 0, 100, 30, 0, 100, 30, 30, 100, 0, 0, 100, 30, 30, 100, 0, 30, // under top rung\n  30, 30, 0, 30, 30, 30, 100, 30, 30, 30, 30, 0, 100, 30, 30, 100, 30, 0, // between top rung and middle\n  30, 30, 0, 30, 30, 30, 30, 60, 30, 30, 30, 0, 30, 60, 30, 30, 60, 0, // top of middle rung\n  30, 60, 0, 30, 60, 30, 67, 60, 30, 30, 60, 0, 67, 60, 30, 67, 60, 0, // right of middle rung\n  67, 60, 0, 67, 60, 30, 67, 90, 30, 67, 60, 0, 67, 90, 30, 67, 90, 0, // bottom of middle rung.\n  30, 90, 0, 30, 90, 30, 67, 90, 30, 30, 90, 0, 67, 90, 30, 67, 90, 0, // right of bottom\n  30, 90, 0, 30, 90, 30, 30, 150, 30, 30, 90, 0, 30, 150, 30, 30, 150, 0, // bottom\n  0, 150, 0, 0, 150, 30, 30, 150, 30, 0, 150, 0, 30, 150, 30, 30, 150, 0, // left side\n  0, 0, 0, 0, 0, 30, 0, 150, 30, 0, 0, 0, 0, 150, 30, 0, 150, 0]), gl.STATIC_DRAW);\n} // Fill the current ARRAY_BUFFER buffer with colors for the 'F'.\n\n\nfunction setColors(gl) {\n  gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array([// left column front\n  200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, // top rung front\n  200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, // middle rung front\n  200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, 200, 70, 120, // left column back\n  80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, // top rung back\n  80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, // middle rung back\n  80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, 80, 70, 200, // top\n  70, 200, 210, 70, 200, 210, 70, 200, 210, 70, 200, 210, 70, 200, 210, 70, 200, 210, // top rung right\n  200, 200, 70, 200, 200, 70, 200, 200, 70, 200, 200, 70, 200, 200, 70, 200, 200, 70, // under top rung\n  210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, // between top rung and middle\n  210, 160, 70, 210, 160, 70, 210, 160, 70, 210, 160, 70, 210, 160, 70, 210, 160, 70, // top of middle rung\n  70, 180, 210, 70, 180, 210, 70, 180, 210, 70, 180, 210, 70, 180, 210, 70, 180, 210, // right of middle rung\n  100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, 100, 70, 210, // bottom of middle rung.\n  76, 210, 100, 76, 210, 100, 76, 210, 100, 76, 210, 100, 76, 210, 100, 76, 210, 100, // right of bottom\n  140, 210, 80, 140, 210, 80, 140, 210, 80, 140, 210, 80, 140, 210, 80, 140, 210, 80, // bottom\n  90, 130, 110, 90, 130, 110, 90, 130, 110, 90, 130, 110, 90, 130, 110, 90, 130, 110, // left side\n  160, 160, 220, 160, 160, 220, 160, 160, 220, 160, 160, 220, 160, 160, 220, 160, 160, 220]), gl.STATIC_DRAW);\n}","map":{"version":3,"names":["VERTEX_SHADER_SOURCE","FRAGMENT_SHADER_SOURCE","VERTEX_SHADER_2_SOURCE","GraphicsEngine","constructor","gl","g_points","program","print","console","log","draw","initProgramFromSources","positionAttributeLocation","getAttribLocation","colorAttributeLocation","getUniformLocation","matrixUniformLocation","positionBuffer","createBuffer","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","setGeometry","size","type","FLOAT","normalize","stride","offset","vertexAttribPointer","colorBuffer","setColors","UNSIGNED_BYTE","degToRad","degrees","Math","PI","viewport","canvas","width","height","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","projectionMatrix","projection","clientWidth","clientHeight","translationMatrix","translation","translations","matrix","multiply","uniformMatrix4fv","primitiveType","TRIANGLES","count","drawArrays","onClick","e","click","a_position","x","clientX","y","clientY","rect","target","getBoundingClientRect","left","top","push","i","length","vertexAttrib3f","POINTS","compileShader","shaderSource","shaderType","shader","createShader","success","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createProgram","vertexShader","fragmentShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","vertexShaderSource","fragmentShaderSource","VERTEX_SHADER","FRAGMENT_SHADER","useProgram","bufferData","Float32Array","STATIC_DRAW","Uint8Array"],"sources":["/Users/danny/Github/physics_game_engine/frontend/src/graphics_engine/GraphicsEngine.ts"],"sourcesContent":["import Matrix4 from \"../math_library/Matrix4\";\nimport * as LinearAlgebra from \"../math_library/LinearAlgebra\";\n\nconst VERTEX_SHADER_SOURCE =\n`#version 300 es\n\nin vec4 a_position;\n\n// A matrix to transform the position by\nuniform mat4 u_matrix;\n\nvoid main() {\n    // Multiply the position by the matrix.\n    gl_Position = u_matrix * a_position;\n}\n`;\n\nconst FRAGMENT_SHADER_SOURCE =\n`#version 300 es\n\nprecision highp float;\nuniform vec4 u_color;\n\nout vec4 outColor;\nvoid main() {\n    outColor = u_color;\n}\n`;\n\n// shaders for testing\nconst VERTEX_SHADER_2_SOURCE =\n`#version 300 es\n\n// an attribute is an input(in) to a vertex shader.\n// It will receive data from a buffer.\nin vec4 a_position;\nvoid main() {\n    gl_Position = a_position;\n    gl_PointSize = 10.0;\n}\n`;\n\nexport class GraphicsEngine {\n    private g_points = [];\n    private program = null;\n    constructor(private gl: WebGL2RenderingContext) {}\n\n    print(): void {\n        console.log(\"graphics engine print\", this.gl);\n    }\n\n    draw(): void {\n        const gl = this.gl\n\n        // compile shaders, create program and use program\n        let program = initProgramFromSources(gl, VERTEX_SHADER_SOURCE, FRAGMENT_SHADER_SOURCE);\n\n        // look up where the attribute and uniform locations\n        let positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n        let colorAttributeLocation = gl.getUniformLocation(program, \"u_color\");\n        let matrixUniformLocation = gl.getUniformLocation(program, \"u_matrix\");\n\n        // Create a buffer\n        let positionBuffer = gl.createBuffer();\n\n        // create a vertex array object (attribute state) and make it the one we're currently working with\n        let vao = gl.createVertexArray();\n        gl.bindVertexArray(vao);\n\n        // Turn on the attribute\n        gl.enableVertexAttribArray(positionAttributeLocation);\n\n        // Bind it to ARRAY_BUFFER (this of it as ARRAY_BUFFER = positionBuffer)\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n        // Fill the current ARRAY_BUFFER buffer\n        // with the values that define a letter 'F'.\n        setGeometry(gl);\n\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n        let size = 3;           // 3 components per iteration\n        let type = gl.FLOAT;    // the data is 32bit floats\n        let normalize = false;  // don't normalize the data\n        let stride = 0;         // 0 = move forward size * sizeof(type) each iteration to get the next position.\n        let offset = 0;         // start at the beginning of the buffer\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\n\n        // Create the color buffer, make it the current ARRAY_BUFFER and copy in the color values\n        let colorBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n        setColors(gl);\n\n        // Turn on the attribute\n        gl.enableVertexAttribArray(colorAttributeLocation);\n\n        // Tell the attribute how to get data out of colorBuffer (ARRAY_BUFFER)\n        gl.vertexAttribPointer(colorAttributeLocation, 3, gl.UNSIGNED_BYTE, true, 0, 0);\n\n        function degToRad(degrees: number) {\n            return degrees * Math.PI / 180;\n        }\n\n        // Draw the scene.\n        \n        // Tell WebGL how to convert from clip space to pixels\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n        // Clear the canvas\n        gl.clearColor(0, 0, 0, 1);\n        gl.clear(gl.COLOR_BUFFER_BIT || gl.DEPTH_BUFFER_BIT);\n\n        // Compute the matrix\n        let projectionMatrix = projection(gl.canvas.clientWidth, gl.canvas.clientHeight, 400);\n        let translationMatrix = translation(translations[0], translations[1], translations[2]);\n        let matrix = multiply(projectionMatrix, translationMatrix);\n\n        // Set the matrix\n        gl.uniformMatrix4fv(matrixUniformLocation, false, matrix);\n\n        // Draw the geometry.\n        let primitiveType = gl.TRIANGLES;\n        offset = 0;\n        let count = 16 * 6;\n        gl.drawArrays(primitiveType, offset, count);\n\n        console.log(\"clientWidth\", gl.canvas.clientWidth);\n        console.log(\"canvas width\", gl.canvas.width);\n        console.log(\"matrix:\", matrix);\n    }\n\n    onClick(e: MouseEvent, canvas: HTMLCanvasElement) {\n        let positionAttributeLocation = this.gl.getAttribLocation(this.program, \"a_position\");\n        console.log(\"positionAttributeLocation\", positionAttributeLocation);\n        this.click(e, this.gl, canvas, positionAttributeLocation);\n    }\n\n    click(e: MouseEvent, gl: WebGL2RenderingContext, canvas: HTMLCanvasElement, a_position: number): void {\n        console.log(\"mouse clicked\");\n        let x = e.clientX; // x coordinate of a mouse pointer\n        let y = e.clientY;\n        let rect = (e.target as HTMLElement).getBoundingClientRect();\n\n        x = ((x - rect.left) - canvas.width/2)/(canvas.width/2);\n        y = (canvas.height/2 - (y - rect.top))/(canvas.height/2);\n        console.log(\"x\", x, \"y\", y, \"rect\", rect);\n\n        // Store the coordinates into g_points array\n        this.g_points.push(x); this.g_points.push(y);\n\n        console.log(\"g_points\", this.g_points);\n\n        // Clear <canvas>\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        for(let i = 0; i < this.g_points.length; i += 2) {\n            // Pass the position of a point to a_Position variable\n            gl.vertexAttrib3f(a_position, this.g_points[i], this.g_points[i+1], 0.0);\n\n            // Draw a point\n            gl.drawArrays(gl.POINTS, 0, 1);\n        }\n    }\n}\n\n/**\n * Creates and compiles a shader.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL2 context.\n * @param {string} shaderSource The GLSL source code for the shader.\n * @param {number} shaderType The type of shader, VERTEX_SHADER or FRAGMENT_SHADER.\n * @return {!WebGLShader} The shader.\n */\nfunction compileShader(gl: WebGL2RenderingContext, shaderSource: string, shaderType: number): WebGLShader {\n    // Create the shader object\n    let shader = gl.createShader(shaderType);\n\n    // Set the shader source code.\n    gl.shaderSource(shader, shaderSource);\n\n    // Compile the shader\n    gl.compileShader(shader);\n\n    // Check if it compiled\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!success) {\n        // Something went wrong during compilation; get the error\n        throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n    }\n\n    return shader;\n}\n\n/** \n * Creates a program from 2 shaders.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL2 context.\n * @param {!WebGLShader} vertexShader A vertex shader.\n * @param {!WebGLShader} fragmentShader A fragment shader.\n * @return {!WebGLProgram} A program.\n */\nfunction createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\n    // create a program.\n    let program = gl.createProgram();\n\n    // attach the shaders.\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n\n    // link the program.\n    gl.linkProgram(program);\n\n    // Check if it linked.\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!success) {\n        // something went wrong with the link\n        throw(\"program failed to link\" + gl.getProgramInfoLog(program));\n    }\n\n    return program;\n}\n\n/**\n * Compiles vertex shader and fragment shader from sources. Creates and uses the program. Returns the program.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL2 context.\n * @param {!string} vertexShaderSource The GLSL source code for the vertex shader.\n * @param {!string} fragmentShaderSource The GLSL source code for the fragment shader.\n * @return {!WebGLProgram} The program created.\n */\nfunction initProgramFromSources(gl: WebGL2RenderingContext, vertexShaderSource: string, fragmentShaderSource: string): WebGLProgram {\n    let vertexShader = compileShader(gl, vertexShaderSource, gl.VERTEX_SHADER);\n    let fragmentShader = compileShader(gl, fragmentShaderSource, gl.FRAGMENT_SHADER);\n    let program = createProgram(gl, vertexShader, fragmentShader);\n    gl.useProgram(program);\n    return program;\n}\n\n// Fill the current ARRAY_BUFFER buffer\n// with the values that define a letter 'F'.\nfunction setGeometry(gl: WebGL2RenderingContext) {\n    gl.bufferData(\n        gl.ARRAY_BUFFER,\n        new Float32Array([\n            // left column front\n            0, 0, 0,\n            30, 0, 0,\n            0, 150, 0,\n            0, 150, 0,\n            30, 0, 0,\n            30, 150, 0,\n\n            // top rung front\n            30, 0, 0,\n            100, 0, 0,\n            30, 30, 0,\n            30, 30, 0,\n            100, 0, 0,\n            100, 30, 0,\n\n            // middle rung front\n            30, 60, 0,\n            67, 60, 0,\n            30, 90, 0,\n            30, 90, 0,\n            67, 60, 0,\n            67, 90, 0,\n\n            // left column back\n            0, 0, 30,\n            30, 0, 30,\n            0, 150, 30,\n            0, 150, 30,\n            30, 0, 30,\n            30, 150, 30,\n\n            // top rung back\n            30, 0, 30,\n            100, 0, 30,\n            30, 30, 30,\n            30, 30, 30,\n            100, 0, 30,\n            100, 30, 30,\n\n            // middle rung back\n            30, 60, 30,\n            67, 60, 30,\n            30, 90, 30,\n            30, 90, 30,\n            67, 60, 30,\n            67, 90, 30,\n\n            // top\n            0, 0, 0,\n            100, 0, 0,\n            100, 0, 30,\n            0, 0, 0,\n            100, 0, 30,\n            0, 0, 30,\n\n            // top rung right\n            100, 0, 0,\n            100, 30, 0,\n            100, 30, 30,\n            100, 0, 0,\n            100, 30, 30,\n            100, 0, 30,\n\n            // under top rung\n            30, 30, 0,\n            30, 30, 30,\n            100, 30, 30,\n            30, 30, 0,\n            100, 30, 30,\n            100, 30, 0,\n\n            // between top rung and middle\n            30, 30, 0,\n            30, 30, 30,\n            30, 60, 30,\n            30, 30, 0,\n            30, 60, 30,\n            30, 60, 0,\n\n            // top of middle rung\n            30, 60, 0,\n            30, 60, 30,\n            67, 60, 30,\n            30, 60, 0,\n            67, 60, 30,\n            67, 60, 0,\n\n            // right of middle rung\n            67, 60, 0,\n            67, 60, 30,\n            67, 90, 30,\n            67, 60, 0,\n            67, 90, 30,\n            67, 90, 0,\n\n            // bottom of middle rung.\n            30, 90, 0,\n            30, 90, 30,\n            67, 90, 30,\n            30, 90, 0,\n            67, 90, 30,\n            67, 90, 0,\n\n            // right of bottom\n            30, 90, 0,\n            30, 90, 30,\n            30, 150, 30,\n            30, 90, 0,\n            30, 150, 30,\n            30, 150, 0,\n\n            // bottom\n            0, 150, 0,\n            0, 150, 30,\n            30, 150, 30,\n            0, 150, 0,\n            30, 150, 30,\n            30, 150, 0,\n\n            // left side\n            0, 0, 0,\n            0, 0, 30,\n            0, 150, 30,\n            0, 0, 0,\n            0, 150, 30,\n            0, 150, 0,\n        ]),\n        gl.STATIC_DRAW);\n}\n\n// Fill the current ARRAY_BUFFER buffer with colors for the 'F'.\nfunction setColors(gl: WebGL2RenderingContext) {\n    gl.bufferData(\n        gl.ARRAY_BUFFER,\n        new Uint8Array([\n            // left column front\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n\n            // top rung front\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n\n            // middle rung front\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n            200, 70, 120,\n\n            // left column back\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n\n            // top rung back\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n\n            // middle rung back\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n            80, 70, 200,\n\n            // top\n            70, 200, 210,\n            70, 200, 210,\n            70, 200, 210,\n            70, 200, 210,\n            70, 200, 210,\n            70, 200, 210,\n\n            // top rung right\n            200, 200, 70,\n            200, 200, 70,\n            200, 200, 70,\n            200, 200, 70,\n            200, 200, 70,\n            200, 200, 70,\n\n            // under top rung\n            210, 100, 70,\n            210, 100, 70,\n            210, 100, 70,\n            210, 100, 70,\n            210, 100, 70,\n            210, 100, 70,\n\n            // between top rung and middle\n            210, 160, 70,\n            210, 160, 70,\n            210, 160, 70,\n            210, 160, 70,\n            210, 160, 70,\n            210, 160, 70,\n\n            // top of middle rung\n            70, 180, 210,\n            70, 180, 210,\n            70, 180, 210,\n            70, 180, 210,\n            70, 180, 210,\n            70, 180, 210,\n\n            // right of middle rung\n            100, 70, 210,\n            100, 70, 210,\n            100, 70, 210,\n            100, 70, 210,\n            100, 70, 210,\n            100, 70, 210,\n\n            // bottom of middle rung.\n            76, 210, 100,\n            76, 210, 100,\n            76, 210, 100,\n            76, 210, 100,\n            76, 210, 100,\n            76, 210, 100,\n\n            // right of bottom\n            140, 210, 80,\n            140, 210, 80,\n            140, 210, 80,\n            140, 210, 80,\n            140, 210, 80,\n            140, 210, 80,\n\n            // bottom\n            90, 130, 110,\n            90, 130, 110,\n            90, 130, 110,\n            90, 130, 110,\n            90, 130, 110,\n            90, 130, 110,\n\n            // left side\n            160, 160, 220,\n            160, 160, 220,\n            160, 160, 220,\n            160, 160, 220,\n            160, 160, 220,\n            160, 160, 220,\n        ]),\n        gl.STATIC_DRAW);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}