{"ast":null,"code":"import Matrix4 from \"./Matrix4\";\nimport Vector3 from \"./Vector3\";\n/**\n * Returns product of two Matrix4's.\n * @param {!Matrix4} a left matrix\n * @param {!Matrix4} b right matrix\n * @return {!Matrix4} the resulting matrix\n */\n\nexport function matrix4Product(a, b) {\n  let result = [];\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      let num = 0;\n\n      for (let k = 0; k < 4; k++) {\n        num += a.getElement(i, k) * b.getElement(k, j);\n      }\n\n      result.push(num);\n    }\n  }\n\n  return new Matrix4(result);\n}\n/**\n * Returns the sum of two Vector3's.\n * \n * @param {!Vector3} v1\n * @param {!Vector3} v2 \n * @returns {!Vector3} the vector sum\n */\n\nexport function vector3Sum(v1, v2) {\n  const result = v1.clone();\n  result.addVector(v2);\n  return result;\n}\n/**\n * Returns dot product of two Vector3's.\n * \n * @param v1 the left vector\n * @param v2 the right vector\n * @returns {!number} the dot product\n */\n\nexport function vector3DotProduct(v1, v2) {\n  return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n}\n/**\n * Multiplies scalar and vector and returns the resulting vector.\n * \n * @param {!number} s the scalar\n * @param {!Vector3} v the vector\n * @returns {!Vector3} the vector\n */\n\nexport function multiplyScalarAndVector3(s, v) {\n  return new Vector3(s * v.x, s * v.y, s * v.z);\n}\n/**\n * Returns product of input matrix and vector. Converts input vector3 to Vector4 with w = 1 for calculation.\n * \n * @param m the Matrix4\n * @param v the Vector3\n * @returns {!Vector3} the resulting vector.\n */\n\nexport function multiplyMatrix4AndVector3(m, v) {\n  let components = [];\n\n  for (let i = 0; i < 3; i++) {\n    components.push(m.getElement(i, 0) * v.x + m.getElement(i, 1) * v.y + m.getElement(i, 2) * v.z + m.getElement(i, 3));\n  }\n\n  return new Vector3(components[0], components[1], components[2]);\n}\n/**\n * Returns a translation Matrix4 based on input.\n * \n * @param {!number} tx amount of translation in x direction.\n * @param {!number} ty amount of translation in y direction.\n * @param {!number} tz amount of translation in z direction.\n * @return {!Matrix4} the Matrix4\n */\n\nexport function translationMatrix4(tx, ty, tz) {\n  return new Matrix4([1, 0, 0, tx, 0, 1, 0, ty, 0, 0, 1, tz, 0, 0, 0, 1]);\n}\n/**\n * Returns an x-rotation matrix based on input. (ccw direction)\n * \n * @param {!number} angle angle in radians\n * @return {!Matrix4} the matrix\n */\n\nexport function xRotationMatrix4(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  return new Matrix4([1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1]);\n}\n;\n/**\n * Returns a y-rotation matrix based on input. (ccw direction)\n * \n * @param {!number} angle angle in radians\n * @return {!Matrix4} the matrix\n */\n\nexport function yRotationMatrix4(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  return new Matrix4([c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1]);\n}\n;\n/**\n * Returns a z-rotation matrix based on input. (ccw direction)\n * \n * @param {!number} angle angle in radians\n * @return {!Matrix4} the matrix\n */\n\nexport function zRotationMatrix4(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  return new Matrix4([c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n}\n;\n/**\n * Returns a scaling matrix\n * @param {!number} sx amount to scale x by\n * @param {!number} sy amount to scale y by\n * @param {!number} sz amount to scale z by\n * @return {!Matrix4} the matrix\n */\n\nexport function scalingMatrix4(sx, sy, sz) {\n  return new Matrix4([sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1]);\n}\n/**\n * Returns a orthographic projection Matrix4 that converts from world space to clip space.\n * The Matrix4 maps the space bounded by the clipping planes into the space of a cube with points in [-1 to +1] in x, y, and z directions.\n * (params all in world space coordinates)\n * \n * @param {!number} left left side of clipping plane\n * @param {!number} right right side of clipping plane\n * @param {!number} top top side of clipping plane\n * @param {!number} bottom bottom side of clipping plane\n * @param {!number} near near side of clipping plane\n * @param {!number} far far side of clipping plane\n */\n\nexport function orthographicProjectionMatrix4(left, right, bottom, top, near, far) {\n  // note: this matrix flips the y-axis so that 0 is at the top.\n  return new Matrix4([2 / (right - left), 0, 0, -(right + left) / (right - left), 0, 2 / (top - bottom), 0, -(top + bottom) / (top - bottom), 0, 0, -2 / (far - near), -(far + near) / (far - near), 0, 0, 0, 1]);\n}","map":{"version":3,"names":["Matrix4","Vector3","matrix4Product","a","b","result","i","j","num","k","getElement","push","vector3Sum","v1","v2","clone","addVector","vector3DotProduct","x","y","z","multiplyScalarAndVector3","s","v","multiplyMatrix4AndVector3","m","components","translationMatrix4","tx","ty","tz","xRotationMatrix4","angle","c","Math","cos","sin","yRotationMatrix4","zRotationMatrix4","scalingMatrix4","sx","sy","sz","orthographicProjectionMatrix4","left","right","bottom","top","near","far"],"sources":["/Users/danny/Github/physics_game_engine/frontend/src/math_library/LinearAlgebra.ts"],"sourcesContent":["import Matrix4 from \"./Matrix4\";\nimport Vector3 from \"./Vector3\";\n\n/**\n * Returns product of two Matrix4's.\n * @param {!Matrix4} a left matrix\n * @param {!Matrix4} b right matrix\n * @return {!Matrix4} the resulting matrix\n */\nexport function matrix4Product(a: Matrix4, b: Matrix4): Matrix4 {\n    let result = [];\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            let num = 0;\n            for (let k = 0; k < 4; k++) {\n                num += a.getElement(i, k) * b.getElement(k, j);\n            }\n            result.push(num);\n        }\n    }\n\n    return new Matrix4(result);\n}\n\n/**\n * Returns the sum of two Vector3's.\n * \n * @param {!Vector3} v1\n * @param {!Vector3} v2 \n * @returns {!Vector3} the vector sum\n */\nexport function vector3Sum(v1: Vector3, v2: Vector3): Vector3 {\n    const result = v1.clone();\n    result.addVector(v2);\n    return result;\n}\n\n/**\n * Returns dot product of two Vector3's.\n * \n * @param v1 the left vector\n * @param v2 the right vector\n * @returns {!number} the dot product\n */\nexport function vector3DotProduct(v1: Vector3, v2: Vector3): number {\n    return v1.x*v2.x + v1.y*v2.y + v1.z*v2.z;\n}\n\n/**\n * Multiplies scalar and vector and returns the resulting vector.\n * \n * @param {!number} s the scalar\n * @param {!Vector3} v the vector\n * @returns {!Vector3} the vector\n */\nexport function multiplyScalarAndVector3(s: number, v: Vector3): Vector3 {\n    return new Vector3(s * v.x, s*v.y, s*v.z);\n}\n\n/**\n * Returns product of input matrix and vector. Converts input vector3 to Vector4 with w = 1 for calculation.\n * \n * @param m the Matrix4\n * @param v the Vector3\n * @returns {!Vector3} the resulting vector.\n */\nexport function multiplyMatrix4AndVector3(m: Matrix4, v: Vector3): Vector3 {\n    let components = [];\n    for (let i = 0; i < 3; i++) {\n        components.push(m.getElement(i, 0) * v.x + m.getElement(i, 1) * v.y + m.getElement(i, 2) * v.z + m.getElement(i, 3));\n    }\n    return new Vector3(components[0], components[1], components[2]);\n}\n\n/**\n * Returns a translation Matrix4 based on input.\n * \n * @param {!number} tx amount of translation in x direction.\n * @param {!number} ty amount of translation in y direction.\n * @param {!number} tz amount of translation in z direction.\n * @return {!Matrix4} the Matrix4\n */\nexport function translationMatrix4(tx: number, ty: number, tz: number): Matrix4 {\n    return new Matrix4([\n        1, 0, 0, tx,\n        0, 1, 0, ty,\n        0, 0, 1, tz,\n        0, 0, 0, 1\n    ]);\n}\n\n/**\n * Returns an x-rotation matrix based on input. (ccw direction)\n * \n * @param {!number} angle angle in radians\n * @return {!Matrix4} the matrix\n */\nexport function xRotationMatrix4(angle: number): Matrix4 {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    return new Matrix4([\n        1, 0, 0, 0,\n        0, c, -s, 0,\n        0, s, c, 0,\n        0, 0, 0, 1\n    ]);\n};\n\n/**\n * Returns a y-rotation matrix based on input. (ccw direction)\n * \n * @param {!number} angle angle in radians\n * @return {!Matrix4} the matrix\n */\n export function yRotationMatrix4(angle: number): Matrix4 {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    return new Matrix4([\n        c, 0, s, 0,\n        0, 1, 0, 0,\n        -s, 0, c, 0,\n        0, 0, 0, 1\n    ]);\n};\n\n/**\n * Returns a z-rotation matrix based on input. (ccw direction)\n * \n * @param {!number} angle angle in radians\n * @return {!Matrix4} the matrix\n */\n export function zRotationMatrix4(angle: number): Matrix4 {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    return new Matrix4([\n        c, -s, 0, 0,\n        s, c, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    ]);\n};\n\n/**\n * Returns a scaling matrix\n * @param {!number} sx amount to scale x by\n * @param {!number} sy amount to scale y by\n * @param {!number} sz amount to scale z by\n * @return {!Matrix4} the matrix\n */\nexport function scalingMatrix4(sx: number, sy: number, sz: number): Matrix4 {\n    return new Matrix4([\n        sx, 0, 0, 0,\n        0, sy, 0, 0,\n        0, 0, sz, 0,\n        0, 0, 0, 1\n    ]);\n}\n\n/**\n * Returns a orthographic projection Matrix4 that converts from world space to clip space.\n * The Matrix4 maps the space bounded by the clipping planes into the space of a cube with points in [-1 to +1] in x, y, and z directions.\n * (params all in world space coordinates)\n * \n * @param {!number} left left side of clipping plane\n * @param {!number} right right side of clipping plane\n * @param {!number} top top side of clipping plane\n * @param {!number} bottom bottom side of clipping plane\n * @param {!number} near near side of clipping plane\n * @param {!number} far far side of clipping plane\n */\nexport function orthographicProjectionMatrix4(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4 {\n    // note: this matrix flips the y-axis so that 0 is at the top.\n    return new Matrix4([\n        2/(right - left), 0, 0, -(right + left)/(right - left),\n        0, 2/(top - bottom), 0, -(top + bottom)/(top - bottom),\n        0, 0, -2/(far - near), -(far + near)/(far - near),\n        0, 0, 0, 1\n    ]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}