{"ast":null,"code":"var _jsxFileName = \"/Users/danny/Github/physics_game_engine/frontend/src/GraphicsPlayground/GraphicsPlayground.js\";\nimport React from \"react\";\nimport { WebGLUtils } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.gl = null;\n  }\n\n  componentDidMount() {\n    this.gl = this.canvasRef.current.getContext(\"webgl2\");\n\n    if (!this.gl) {\n      console.log(\"No webgl2 context found.\");\n    }\n\n    this.main();\n  }\n\n  componentWillUnmount() {// TODO: research how to clean up webgl?\n  }\n\n  main() {\n    const gl = this.gl;\n    /*let vertexShaderSource = \n    `#version 300 es\n     // an attribute is an input(in) in a vertex shader.\n    // It will receive data from a buffer\n    in vec4 a_position;\n     //all shaders have a main function\n    void main() {\n        // gl_Position is a special variable a vertex shader\n        // is responsible for setting\n        gl_Position = a_position;\n    }\n    `\n     let fragmentShaderSource =\n    `#version 300 es\n     // fragment shaders don't have a default precision so we need\n    // to pick one. highp is a good default. It means \"high precision\"\n    precision highp float;\n     // we need to declare an output for the fragment shader\n    out vec4 outColor;\n     void main() {\n        // Just set the output to a constant reddish-purple\n        outColor = vec4(1, 0, 0.5, 1);\n    }\n    `\n     let vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    let fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n     let program = this.createProgram(gl, vertexShader, fragmentShader);\n     let positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n    \n    let positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n     // three 2d points\n    let positions = [\n        0, 0,\n        0, 0.5,\n        0.7, 0,\n    ]\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n      let vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    let size = 2;   // 2 components per iteration\n    let type = gl.FLOAT;    // the data is 32bit floats\n    let normalize = false;  // don't normalize the data\n    let stride = 0;         // 0 = move forward size * sizeof(type) each iteration to get the next position\n    let offset = 0;         // start at the beginning of the buffer\n    gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\n     // tells WebGL the -1 +1 clip space maps to 0 <-> gl.canvas.width for x, 0 <-> gl.canvas.height for y.\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n     // Clear the canvas\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n     // Tell it to use our program (pair of shaders)\n    gl.useProgram(program);\n     // Bind the attribute/buffer set we want.\n    gl.bindVertexArray(vao);\n     // execute GLSL program.\n    let primitiveType = gl.TRIANGLES;\n    offset = 0;\n    let count = 3;\n    gl.drawArrays(primitiveType, offset, count);\n     this.setGeometry(this.gl);\n    gl.drawArrays(gl.TRIANGLES, 0, 3);*/\n\n    let vertexShaderSource = `#version 300 es\n        in vec2 a_position;\n        \n        uniform mat3 u_matrix;\n        \n        out vec4 v_color;\n        \n        void main() {\n          // Multiply the position by the matrix.\n          gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\n        \n          // Convert from clipspace to colorspace.\n          // Clipspace goes -1.0 to +1.0\n          // Colorspace goes from 0.0 to 1.0\n          v_color = gl_Position * 0.5 + 0.5;\n        }\n        `;\n    let fragmentShaderSource = `#version 300 es\n        \n        precision highp float;\n\n        in vec4 v_color;\n\n        out vec4 outColor;\n\n        void main() {\n            outColor = v_color;\n        }\n        `; // second part: triangle with gradient\n\n    let vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    let fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    let program = this.createProgram(gl, vertexShader, fragmentShader); // look up where the vertex data needs to go.\n\n    let positionLocation = gl.getAttribLocation(program, \"a_position\"); // lookup uniforms\n\n    let matrixLocation = gl.getUniformLocation(program, \"u_matrix\"); // Create set of attributes\n\n    let vao = gl.createVertexArray();\n    gl.bindVertexArray(vao); // Create a buffer.\n\n    let buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer); // Set Geometry.\n\n    this.setGeometry(gl); // tell the position attribute how to pull data out of the curernt ARRAY_BUFFER\n\n    gl.enableVertexAttribArray(positionLocation);\n    let size = 2;\n    let type = gl.FLOAT;\n    let normalize = false;\n    let stride = 0;\n    let offset = 0;\n    gl.vertexAttribPointer(positionLocation, size, type, normalize, stride, offset);\n    let translation = [200, 150];\n    let angleInRadians = 0;\n    let scale = [1, 1]; // Draw the scene.\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // Clear the canvas\n\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); // Compute the matrix\n\n    /*let matrix = m3.projection(gl.canvas.clientWidth, gl.canvas.clientHeight);\n    matrix = m3.translate(matrix, translation[0], translation[1]);\n    matrix = m3.rotate(matrix, angleInRadians);\n    matrix = m3.scale(matrix, scale[0], scale[1]);*/\n    // Tell it to use our program (pair of shaders)\n\n    gl.useProgram(program); // Bind the attribute/buffer set we want.\n\n    gl.bindVertexArray(vao); // Set the matrix.\n    // gl.uniformMatrix3fv(matrixLocation, false, matrix);\n    // Draw the geometry.\n\n    offset = 0;\n    let count = 3;\n    gl.drawArrays(gl.TRIANGLES, offset, count);\n  } // Fill the buffer the values that define a triangle.\n\n\n  setGeometry(gl) {\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, -100, 150, 125, -175, 100]), gl.STATIC_DRAW);\n  } // this function creates a shader, uploads the GLSL source, and compiles the shader\n\n\n  createShader(gl, type, source) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (success) {\n      return shader;\n    }\n\n    console.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n  } // links the 2 shaders into a program\n\n\n  createProgram(gl, vertexShader, fragmentShader) {\n    let program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (success) {\n      return program;\n    }\n\n    console.log(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphics_playground\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"graphics playground page desu...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"canvas_container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          width: CANVAS_WIDTH,\n          height: CANVAS_HEIGHT\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","WebGLUtils","CANVAS_WIDTH","CANVAS_HEIGHT","Home","Component","constructor","props","canvasRef","createRef","gl","componentDidMount","current","getContext","console","log","main","componentWillUnmount","vertexShaderSource","fragmentShaderSource","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","positionLocation","getAttribLocation","matrixLocation","getUniformLocation","vao","createVertexArray","bindVertexArray","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","setGeometry","enableVertexAttribArray","size","type","FLOAT","normalize","stride","offset","vertexAttribPointer","translation","angleInRadians","scale","viewport","canvas","width","height","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","count","drawArrays","TRIANGLES","bufferData","Float32Array","STATIC_DRAW","source","shader","shaderSource","compileShader","success","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","render"],"sources":["/Users/danny/Github/physics_game_engine/frontend/src/GraphicsPlayground/GraphicsPlayground.js"],"sourcesContent":["import React from \"react\";\nimport { WebGLUtils } from \"three\";\n\nconst CANVAS_WIDTH = 1000;\nconst CANVAS_HEIGHT = 500;\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.canvasRef = React.createRef();\n        this.gl = null;\n    }\n\n    componentDidMount() {\n        this.gl = this.canvasRef.current.getContext(\"webgl2\");\n        if(!this.gl) {\n            console.log(\"No webgl2 context found.\");\n        }\n        this.main();\n    }\n\n    componentWillUnmount() {\n        // TODO: research how to clean up webgl?\n    }\n\n    main() {\n        const gl = this.gl;\n\n        /*let vertexShaderSource = \n        `#version 300 es\n\n        // an attribute is an input(in) in a vertex shader.\n        // It will receive data from a buffer\n        in vec4 a_position;\n\n        //all shaders have a main function\n        void main() {\n            // gl_Position is a special variable a vertex shader\n            // is responsible for setting\n            gl_Position = a_position;\n        }\n        `\n\n        let fragmentShaderSource =\n        `#version 300 es\n\n        // fragment shaders don't have a default precision so we need\n        // to pick one. highp is a good default. It means \"high precision\"\n        precision highp float;\n\n        // we need to declare an output for the fragment shader\n        out vec4 outColor;\n\n        void main() {\n            // Just set the output to a constant reddish-purple\n            outColor = vec4(1, 0, 0.5, 1);\n        }\n        `\n\n        let vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        let fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n        let program = this.createProgram(gl, vertexShader, fragmentShader);\n\n        let positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n        \n        let positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n        // three 2d points\n        let positions = [\n            0, 0,\n            0, 0.5,\n            0.7, 0,\n        ]\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n\n        let vao = gl.createVertexArray();\n        gl.bindVertexArray(vao);\n        gl.enableVertexAttribArray(positionAttributeLocation);\n        let size = 2;   // 2 components per iteration\n        let type = gl.FLOAT;    // the data is 32bit floats\n        let normalize = false;  // don't normalize the data\n        let stride = 0;         // 0 = move forward size * sizeof(type) each iteration to get the next position\n        let offset = 0;         // start at the beginning of the buffer\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\n\n        // tells WebGL the -1 +1 clip space maps to 0 <-> gl.canvas.width for x, 0 <-> gl.canvas.height for y.\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n        // Clear the canvas\n        gl.clearColor(0, 0, 0, 1);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        // Tell it to use our program (pair of shaders)\n        gl.useProgram(program);\n\n        // Bind the attribute/buffer set we want.\n        gl.bindVertexArray(vao);\n\n        // execute GLSL program.\n        let primitiveType = gl.TRIANGLES;\n        offset = 0;\n        let count = 3;\n        gl.drawArrays(primitiveType, offset, count);\n\n        this.setGeometry(this.gl);\n        gl.drawArrays(gl.TRIANGLES, 0, 3);*/\n\n        let vertexShaderSource =\n        `#version 300 es\n        in vec2 a_position;\n        \n        uniform mat3 u_matrix;\n        \n        out vec4 v_color;\n        \n        void main() {\n          // Multiply the position by the matrix.\n          gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\n        \n          // Convert from clipspace to colorspace.\n          // Clipspace goes -1.0 to +1.0\n          // Colorspace goes from 0.0 to 1.0\n          v_color = gl_Position * 0.5 + 0.5;\n        }\n        `;\n\n        let fragmentShaderSource = \n        `#version 300 es\n        \n        precision highp float;\n\n        in vec4 v_color;\n\n        out vec4 outColor;\n\n        void main() {\n            outColor = v_color;\n        }\n        `;\n\n        // second part: triangle with gradient\n        let vertexShader = this.createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        let fragmentShader = this.createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n        let program = this.createProgram(gl, vertexShader, fragmentShader);\n\n        // look up where the vertex data needs to go.\n        let positionLocation = gl.getAttribLocation(program, \"a_position\");\n\n        // lookup uniforms\n        let matrixLocation = gl.getUniformLocation(program, \"u_matrix\");\n\n        // Create set of attributes\n        let vao = gl.createVertexArray();\n        gl.bindVertexArray(vao);\n\n        // Create a buffer.\n        let buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n        // Set Geometry.\n        this.setGeometry(gl);\n\n        // tell the position attribute how to pull data out of the curernt ARRAY_BUFFER\n        gl.enableVertexAttribArray(positionLocation);\n        let size = 2;\n        let type = gl.FLOAT;\n        let normalize = false;\n        let stride = 0;\n        let offset = 0;\n        gl.vertexAttribPointer(positionLocation, size, type, normalize, stride, offset);\n\n        let translation = [200, 150];\n        let angleInRadians = 0;\n        let scale = [1, 1];\n\n        // Draw the scene.\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n        // Clear the canvas\n        gl.clearColor(0, 0, 0, 0);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        // Compute the matrix\n        /*let matrix = m3.projection(gl.canvas.clientWidth, gl.canvas.clientHeight);\n        matrix = m3.translate(matrix, translation[0], translation[1]);\n        matrix = m3.rotate(matrix, angleInRadians);\n        matrix = m3.scale(matrix, scale[0], scale[1]);*/\n\n        // Tell it to use our program (pair of shaders)\n        gl.useProgram(program);\n\n        // Bind the attribute/buffer set we want.\n        gl.bindVertexArray(vao);\n\n        // Set the matrix.\n        // gl.uniformMatrix3fv(matrixLocation, false, matrix);\n\n        // Draw the geometry.\n        offset = 0;\n        let count = 3;\n        gl.drawArrays(gl.TRIANGLES, offset, count);\n    }\n\n    // Fill the buffer the values that define a triangle.\n    setGeometry(gl) {\n        gl.bufferData(\n            gl.ARRAY_BUFFER,\n            new Float32Array([\n                0, -100,\n                150, 125,\n                -175, 100]),\n            gl.STATIC_DRAW);\n    }\n\n    // this function creates a shader, uploads the GLSL source, and compiles the shader\n    createShader(gl, type, source) {\n        let shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (success) {\n            return shader;\n        }\n\n        console.log(gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n    }\n\n    // links the 2 shaders into a program\n    createProgram(gl, vertexShader, fragmentShader) {\n        let program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (success) {\n            return program;\n        }\n\n        console.log(gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n    }\n\n    render() {\n        return (\n            <div className=\"graphics_playground\">\n                <h2>graphics playground page desu...</h2>\n                <div id=\"canvas_container\">\n                    <canvas ref={this.canvasRef} width={CANVAS_WIDTH} height={CANVAS_HEIGHT} />\n                </div>\n            </div>\n        );\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}