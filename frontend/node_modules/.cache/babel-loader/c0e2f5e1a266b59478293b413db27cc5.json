{"ast":null,"code":"/**\n * Returns a translation matrix based on input.\n * \n * @param {!number} tx amount of translation in x direction.\n * @param {!number} ty amount of translation in y direction.\n * @param {!number} tz amount of translation in z direction.\n * @return {!number[]} the matrix\n */\nexport function translation(tx, ty, tz) {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1];\n}\n/**\n * Returns an x-rotation matrix based on input.\n * \n * @param {!number} angle angle in radians\n * @return {!number[]} the matrix\n */\n\nexport function xRotation(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  return [1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1];\n}\n;\n/**\n * Returns a y-rotation matrix based on input.\n * \n * @param {!number} angle angle in radians\n * @return {!number[]} the matrix\n */\n\nexport function yRotation(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  return [c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1];\n}\n;\n/**\n * Returns a z-rotation matrix based on input.\n * \n * @param {!number} angle angle in radians\n * @return {!number[]} the matrix\n */\n\nexport function zRotation(angle) {\n  const c = Math.cos(angle);\n  const s = Math.sin(angle);\n  return [c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n;\n/**\n * Returns a scaling matrix\n * @param {!number} sx amount to scale x by\n * @param {!number} sy amount to scale y by\n * @param {!number} sz amount to scale z by\n * @return {!number[]} the matrix\n */\n\nexport function scaling(sx, sy, sz) {\n  return [sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1];\n}\n/**\n * multiplies two matrix4's (assumes they are both valid matrices)\n */\n\nexport function multiply(a, b) {\n  const b00 = b[0 * 4 + 0];\n  const b01 = b[0 * 4 + 1];\n  const b02 = b[0 * 4 + 2];\n  const b03 = b[0 * 4 + 3];\n  const b10 = b[1 * 4 + 0];\n  const b11 = b[1 * 4 + 1];\n  const b12 = b[1 * 4 + 2];\n  const b13 = b[1 * 4 + 3];\n  const b20 = b[2 * 4 + 0];\n  const b21 = b[2 * 4 + 1];\n  const b22 = b[2 * 4 + 2];\n  const b23 = b[2 * 4 + 3];\n  const b30 = b[3 * 4 + 0];\n  const b31 = b[3 * 4 + 1];\n  const b32 = b[3 * 4 + 2];\n  const b33 = b[3 * 4 + 3];\n  const a00 = a[0 * 4 + 0];\n  const a01 = a[0 * 4 + 1];\n  const a02 = a[0 * 4 + 2];\n  const a03 = a[0 * 4 + 3];\n  const a10 = a[1 * 4 + 0];\n  const a11 = a[1 * 4 + 1];\n  const a12 = a[1 * 4 + 2];\n  const a13 = a[1 * 4 + 3];\n  const a20 = a[2 * 4 + 0];\n  const a21 = a[2 * 4 + 1];\n  const a22 = a[2 * 4 + 2];\n  const a23 = a[2 * 4 + 3];\n  const a30 = a[3 * 4 + 0];\n  const a31 = a[3 * 4 + 1];\n  const a32 = a[3 * 4 + 2];\n  const a33 = a[3 * 4 + 3];\n}","map":{"version":3,"names":["translation","tx","ty","tz","xRotation","angle","c","Math","cos","s","sin","yRotation","zRotation","scaling","sx","sy","sz","multiply","a","b","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33"],"sources":["/Users/danny/Github/physics_game_engine/frontend/src/math_library/Matrix4.ts"],"sourcesContent":["/**\n * Returns a translation matrix based on input.\n * \n * @param {!number} tx amount of translation in x direction.\n * @param {!number} ty amount of translation in y direction.\n * @param {!number} tz amount of translation in z direction.\n * @return {!number[]} the matrix\n */\nexport function translation(tx: number, ty: number, tz: number): number[] {\n    return [\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        tx, ty, tz, 1\n    ];\n}\n\n/**\n * Returns an x-rotation matrix based on input.\n * \n * @param {!number} angle angle in radians\n * @return {!number[]} the matrix\n */\nexport function xRotation(angle: number): number[] {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    return [\n        1, 0, 0, 0,\n        0, c, s, 0,\n        0, -s, c, 0,\n        0, 0, 0, 1\n    ];\n};\n\n/**\n * Returns a y-rotation matrix based on input.\n * \n * @param {!number} angle angle in radians\n * @return {!number[]} the matrix\n */\n export function yRotation(angle: number): number[] {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    return [\n        c, 0, -s, 0,\n        0, 1, 0, 0,\n        s, 0, c, 0,\n        0, 0, 0, 1\n    ];\n};\n\n/**\n * Returns a z-rotation matrix based on input.\n * \n * @param {!number} angle angle in radians\n * @return {!number[]} the matrix\n */\n export function zRotation(angle: number): number[] {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n\n    return [\n        c, s, 0, 0,\n        -s, c, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    ];\n};\n\n/**\n * Returns a scaling matrix\n * @param {!number} sx amount to scale x by\n * @param {!number} sy amount to scale y by\n * @param {!number} sz amount to scale z by\n * @return {!number[]} the matrix\n */\nexport function scaling(sx: number, sy: number, sz: number) {\n    return [\n        sx, 0, 0, 0,\n        0, sy, 0, 0,\n        0, 0, sz, 0,\n        0, 0, 0, 1\n    ];\n}\n\n/**\n * multiplies two matrix4's (assumes they are both valid matrices)\n */\nexport function multiply(a: number[], b: number[]) {\n    const b00 = b[0 * 4 + 0];\n    const b01 = b[0 * 4 + 1];\n    const b02 = b[0 * 4 + 2];\n    const b03 = b[0 * 4 + 3];\n    const b10 = b[1 * 4 + 0];\n    const b11 = b[1 * 4 + 1];\n    const b12 = b[1 * 4 + 2];\n    const b13 = b[1 * 4 + 3];\n    const b20 = b[2 * 4 + 0];\n    const b21 = b[2 * 4 + 1];\n    const b22 = b[2 * 4 + 2];\n    const b23 = b[2 * 4 + 3];\n    const b30 = b[3 * 4 + 0];\n    const b31 = b[3 * 4 + 1];\n    const b32 = b[3 * 4 + 2];\n    const b33 = b[3 * 4 + 3];\n    const a00 = a[0 * 4 + 0];\n    const a01 = a[0 * 4 + 1];\n    const a02 = a[0 * 4 + 2];\n    const a03 = a[0 * 4 + 3];\n    const a10 = a[1 * 4 + 0];\n    const a11 = a[1 * 4 + 1];\n    const a12 = a[1 * 4 + 2];\n    const a13 = a[1 * 4 + 3];\n    const a20 = a[2 * 4 + 0];\n    const a21 = a[2 * 4 + 1];\n    const a22 = a[2 * 4 + 2];\n    const a23 = a[2 * 4 + 3];\n    const a30 = a[3 * 4 + 0];\n    const a31 = a[3 * 4 + 1];\n    const a32 = a[3 * 4 + 2];\n    const a33 = a[3 * 4 + 3];}"],"mappings":"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"},"metadata":{},"sourceType":"module"}