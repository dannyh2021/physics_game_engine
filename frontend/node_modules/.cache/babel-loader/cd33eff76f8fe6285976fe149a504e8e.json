{"ast":null,"code":"import { projection } from \"../math_library/Matrix4.ts\";\nconst VERTEX_SHADER_SOURCE = `#version 300 es\n\nin vec4 a_position;\n\n// A matrix to transform the position by\nuniform mat4 u_matrix;\n\nvoid main() {\n    // Multiply the position by the matrix.\n    gl_Position = u_matrix * a_position;\n}\n`;\nconst FRAGMENT_SHADER_SOURCE = `#version 300 es\n\nprecision highp float;\nuniform vec4 u_color;\n\nout vec4 outColor;\nvoid main() {\n    outColor = u_color;\n}\n`; // shaders for testing\n\nconst VERTEX_SHADER_2_SOURCE = `#version 300 es\n\n// an attribute is an input(in) to a vertex shader.\n// It will receive data from a buffer.\nin vec4 a_position;\nvoid main() {\n    gl_Position = a_position;\n    gl_PointSize = 10.0;\n}\n`;\nexport class GraphicsEngine {\n  constructor(gl) {\n    this.gl = gl;\n    this.g_points = [];\n    this.program = null;\n  }\n\n  print() {\n    console.log(\"graphics engine print\", this.gl);\n  }\n\n  draw() {\n    const gl = this.gl; // compile shaders, create program and use program\n\n    let vertexShader = compileShader(gl, VERTEX_SHADER_2_SOURCE, gl.VERTEX_SHADER);\n    let fragmentShader = compileShader(gl, FRAGMENT_SHADER_SOURCE, gl.FRAGMENT_SHADER);\n    let program = createProgram(gl, vertexShader, fragmentShader);\n    gl.useProgram(program); // look up where the vertex data needs to go.\n\n    let positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n\n    if (positionAttributeLocation < 0) {\n      console.log(\"Failed to get the storage location of a_position\");\n      return;\n    } // lookup uniform locations\n\n\n    let colorLocation = gl.getUniformLocation(program, \"u_color\");\n    let matrixLocation = gl.getUniformLocation(program, \"u_matrix\"); // Create a buffer\n\n    let positionBuffer = gl.createBuffer(); // create a vertex array object (attribute state)\n\n    let vao = gl.createVertexArray(); // and make it the one we're currently working with\n\n    gl.bindVertexArray(vao); // Turn on the attribute\n\n    gl.enableVertexAttribArray(positionAttributeLocation); // Bind it to ARRAY_BUFFER (this of it as ARRAY_BUFFER = positionBuffer)\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer); // Fill the current ARRAY_BUFFER buffer\n    // with the values that define a letter 'F'.\n\n    setGeometry(gl); // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n\n    let size = 3; // 3 components per iteration\n\n    let type = gl.FLOAT; // the data is 32bit floats\n\n    let normalize = false; // don't normalize the data\n\n    let stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position.\n\n    let offset = 0; // start at the beginning of the buffer\n\n    gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset); // Create the color buffer, make it the current ARRAY_BUFFER and copy in the color values\n\n    let colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    setColors(gl); // Compute the matrix\n\n    let projectionMatrix = projection(gl.canvas.clientWidth, gl.canvas.clientHeight, 400);\n    console.log(\"projection:\", projectionMatrix); // Set the matrix\n\n    gl.uniformMatrix4fv(matrixLocation, false, matrix);\n  }\n\n  onClick(e, canvas) {\n    let positionAttributeLocation = this.gl.getAttribLocation(this.program, \"a_position\");\n    console.log(\"positionAttributeLocation\", positionAttributeLocation);\n    this.click(e, this.gl, canvas, positionAttributeLocation);\n  }\n\n  click(e, gl, canvas, a_position) {\n    console.log(\"mouse clicked\");\n    let x = e.clientX; // x coordinate of a mouse pointer\n\n    let y = e.clientY;\n    let rect = e.target.getBoundingClientRect();\n    x = (x - rect.left - canvas.width / 2) / (canvas.width / 2);\n    y = (canvas.height / 2 - (y - rect.top)) / (canvas.height / 2);\n    console.log(\"x\", x, \"y\", y, \"rect\", rect); // Store the coordinates into g_points array\n\n    this.g_points.push(x);\n    this.g_points.push(y);\n    console.log(\"g_points\", this.g_points); // Clear <canvas>\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    for (let i = 0; i < this.g_points.length; i += 2) {\n      // Pass the position of a point to a_Position variable\n      gl.vertexAttrib3f(a_position, this.g_points[i], this.g_points[i + 1], 0.0); // Draw a point\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n    }\n  }\n\n}\n/**\n * Creates and compiles a shader.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL context.\n * @param {string} shaderSource The GLSL source code for the shader.\n * @param {number} shaderType The type of shader, VERTEX_SHADER or FRAGMENT_SHADER.\n * @return {!WebGLShader} The shader.\n */\n\nfunction compileShader(gl, shaderSource, shaderType) {\n  // Create the shader object\n  let shader = gl.createShader(shaderType); // Set the shader source code.\n\n  gl.shaderSource(shader, shaderSource); // Compile the shader\n\n  gl.compileShader(shader); // Check if it compiled\n\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  if (!success) {\n    // Something went wrong during compilation; get the error\n    throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n  }\n\n  return shader;\n}\n/** \n * Creates a program from 2 shaders.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL context.\n * @param {!WebGLShader} vertexShader A vertex shader.\n * @param {!WebGLShader} fragmentShader A fragment shader.\n * @return {!WebGLProgram} A program.\n */\n\n\nfunction createProgram(gl, vertexShader, fragmentShader) {\n  // create a program.\n  let program = gl.createProgram(); // attach the shaders.\n\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader); // link the program.\n\n  gl.linkProgram(program); // Check if it linked.\n\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n  if (!success) {\n    // something went wrong with the link\n    throw \"program failed to link\" + gl.getProgramInfoLog(program);\n  }\n\n  return program;\n} // Fill the current ARRAY_BUFFER buffer\n// with the values that define a letter 'F'.\n\n\nfunction setGeometry(gl) {\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([// left column\n  0, 0, 0, 30, 0, 0, 0, 150, 0, 0, 150, 0, 30, 0, 0, 30, 150, 0, // top rung\n  30, 0, 0, 100, 0, 0, 30, 30, 0, 30, 30, 0, 100, 0, 0, 100, 30, 0, // middle rung\n  30, 60, 0, 67, 60, 0, 30, 90, 0, 30, 90, 0, 67, 60, 0, 67, 90, 0]), gl.STATIC_DRAW);\n}","map":{"version":3,"names":["projection","VERTEX_SHADER_SOURCE","FRAGMENT_SHADER_SOURCE","VERTEX_SHADER_2_SOURCE","GraphicsEngine","constructor","gl","g_points","program","print","console","log","draw","vertexShader","compileShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","useProgram","positionAttributeLocation","getAttribLocation","colorLocation","getUniformLocation","matrixLocation","positionBuffer","createBuffer","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","setGeometry","size","type","FLOAT","normalize","stride","offset","vertexAttribPointer","colorBuffer","setColors","projectionMatrix","canvas","clientWidth","clientHeight","uniformMatrix4fv","matrix","onClick","e","click","a_position","x","clientX","y","clientY","rect","target","getBoundingClientRect","left","width","height","top","push","clear","COLOR_BUFFER_BIT","i","length","vertexAttrib3f","drawArrays","POINTS","shaderSource","shaderType","shader","createShader","success","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","bufferData","Float32Array","STATIC_DRAW"],"sources":["/Users/danny/Github/physics_game_engine/frontend/src/graphics_engine/GraphicsEngine.ts"],"sourcesContent":["import { translation, xRotation, yRotation, zRotation, projection, multiply } from \"../math_library/Matrix4.ts\";\n\nconst VERTEX_SHADER_SOURCE =\n`#version 300 es\n\nin vec4 a_position;\n\n// A matrix to transform the position by\nuniform mat4 u_matrix;\n\nvoid main() {\n    // Multiply the position by the matrix.\n    gl_Position = u_matrix * a_position;\n}\n`;\n\nconst FRAGMENT_SHADER_SOURCE =\n`#version 300 es\n\nprecision highp float;\nuniform vec4 u_color;\n\nout vec4 outColor;\nvoid main() {\n    outColor = u_color;\n}\n`;\n\n// shaders for testing\nconst VERTEX_SHADER_2_SOURCE =\n`#version 300 es\n\n// an attribute is an input(in) to a vertex shader.\n// It will receive data from a buffer.\nin vec4 a_position;\nvoid main() {\n    gl_Position = a_position;\n    gl_PointSize = 10.0;\n}\n`;\n\nexport class GraphicsEngine {\n    private g_points = [];\n    private program = null;\n    constructor(private gl: WebGL2RenderingContext) {}\n\n    print(): void {\n        console.log(\"graphics engine print\", this.gl);\n    }\n\n    draw(): void {\n        const gl = this.gl\n\n        // compile shaders, create program and use program\n        let vertexShader = compileShader(gl, VERTEX_SHADER_2_SOURCE, gl.VERTEX_SHADER);\n        let fragmentShader = compileShader(gl, FRAGMENT_SHADER_SOURCE, gl.FRAGMENT_SHADER);\n        let program = createProgram(gl, vertexShader, fragmentShader);\n        gl.useProgram(program);\n\n        // look up where the vertex data needs to go.\n        let positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n        if (positionAttributeLocation < 0) {\n            console.log(\"Failed to get the storage location of a_position\");\n            return;\n        }\n        \n        // lookup uniform locations\n        let colorLocation = gl.getUniformLocation(program, \"u_color\");\n        let matrixLocation = gl.getUniformLocation(program, \"u_matrix\");\n\n        // Create a buffer\n        let positionBuffer = gl.createBuffer();\n\n        // create a vertex array object (attribute state)\n        let vao = gl.createVertexArray();\n\n        // and make it the one we're currently working with\n        gl.bindVertexArray(vao);\n\n        // Turn on the attribute\n        gl.enableVertexAttribArray(positionAttributeLocation);\n\n        // Bind it to ARRAY_BUFFER (this of it as ARRAY_BUFFER = positionBuffer)\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n        // Fill the current ARRAY_BUFFER buffer\n        // with the values that define a letter 'F'.\n        setGeometry(gl);\n\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n        let size = 3;           // 3 components per iteration\n        let type = gl.FLOAT;    // the data is 32bit floats\n        let normalize = false;  // don't normalize the data\n        let stride = 0;         // 0 = move forward size * sizeof(type) each iteration to get the next position.\n        let offset = 0;         // start at the beginning of the buffer\n        gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);\n\n        // Create the color buffer, make it the current ARRAY_BUFFER and copy in the color values\n        let colorBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n        setColors(gl);\n\n        // Compute the matrix\n        let projectionMatrix = projection(gl.canvas.clientWidth, gl.canvas.clientHeight, 400);\n        console.log(\"projection:\", projectionMatrix);\n\n        // Set the matrix\n        gl.uniformMatrix4fv(matrixLocation, false, matrix);\n    }\n\n    onClick(e: MouseEvent, canvas: HTMLCanvasElement) {\n        let positionAttributeLocation = this.gl.getAttribLocation(this.program, \"a_position\");\n        console.log(\"positionAttributeLocation\", positionAttributeLocation);\n        this.click(e, this.gl, canvas, positionAttributeLocation);\n    }\n\n    click(e: MouseEvent, gl: WebGL2RenderingContext, canvas: HTMLCanvasElement, a_position: number): void {\n        console.log(\"mouse clicked\");\n        let x = e.clientX; // x coordinate of a mouse pointer\n        let y = e.clientY;\n        let rect = (e.target as HTMLElement).getBoundingClientRect();\n\n        x = ((x - rect.left) - canvas.width/2)/(canvas.width/2);\n        y = (canvas.height/2 - (y - rect.top))/(canvas.height/2);\n        console.log(\"x\", x, \"y\", y, \"rect\", rect);\n\n        // Store the coordinates into g_points array\n        this.g_points.push(x); this.g_points.push(y);\n\n        console.log(\"g_points\", this.g_points);\n\n        // Clear <canvas>\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        for(let i = 0; i < this.g_points.length; i += 2) {\n            // Pass the position of a point to a_Position variable\n            gl.vertexAttrib3f(a_position, this.g_points[i], this.g_points[i+1], 0.0);\n\n            // Draw a point\n            gl.drawArrays(gl.POINTS, 0, 1);\n        }\n    }\n}\n\n/**\n * Creates and compiles a shader.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL context.\n * @param {string} shaderSource The GLSL source code for the shader.\n * @param {number} shaderType The type of shader, VERTEX_SHADER or FRAGMENT_SHADER.\n * @return {!WebGLShader} The shader.\n */\nfunction compileShader(gl: WebGL2RenderingContext, shaderSource: string, shaderType: number): WebGLShader {\n    // Create the shader object\n    let shader = gl.createShader(shaderType);\n\n    // Set the shader source code.\n    gl.shaderSource(shader, shaderSource);\n\n    // Compile the shader\n    gl.compileShader(shader);\n\n    // Check if it compiled\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!success) {\n        // Something went wrong during compilation; get the error\n        throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\n    }\n\n    return shader;\n}\n\n/** \n * Creates a program from 2 shaders.\n * \n * @param {!WebGL2RenderingContext} gl The WebGL context.\n * @param {!WebGLShader} vertexShader A vertex shader.\n * @param {!WebGLShader} fragmentShader A fragment shader.\n * @return {!WebGLProgram} A program.\n */\nfunction createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\n    // create a program.\n    let program = gl.createProgram();\n\n    // attach the shaders.\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n\n    // link the program.\n    gl.linkProgram(program);\n\n    // Check if it linked.\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!success) {\n        // something went wrong with the link\n        throw(\"program failed to link\" + gl.getProgramInfoLog(program));\n    }\n\n    return program;\n}\n\n// Fill the current ARRAY_BUFFER buffer\n// with the values that define a letter 'F'.\nfunction setGeometry(gl) {\n    gl.bufferData(\n        gl.ARRAY_BUFFER, new Float32Array([\n            // left column\n            0, 0, 0,\n            30, 0, 0,\n            0, 150, 0,\n            0, 150, 0,\n            30, 0, 0,\n            30, 150, 0,\n\n            // top rung\n            30, 0, 0,\n            100, 0, 0,\n            30, 30, 0,\n            30, 30, 0,\n            100, 0, 0,\n            100, 30, 0,\n\n            // middle rung\n            30, 60, 0,\n            67, 60, 0,\n            30, 90, 0,\n            30, 90, 0,\n            67, 60, 0,\n            67, 90, 0]),\n        gl.STATIC_DRAW);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}